// Script para verificar se o usu√°rio √© admin e controlar visibilidade de elementos

console.log('üîê Sistema de verifica√ß√£o de admin carregado');

// Fun√ß√£o para verificar se o usu√°rio √© admin
function verificarSeAdmin() {
    const token = localStorage.getItem('jwt_token') || localStorage.getItem('token');
    
    if (!token) {
        console.log('‚ùå Usu√°rio n√£o est√° logado');
        return false;
    }
    
    try {
        // Decodificar o token JWT (sem verificar assinatura)
        const payload = JSON.parse(atob(token.split('.')[1]));
        console.log('üìã Payload do token:', payload);
        
        // Verificar se o tipo √© admin
        const isAdmin = payload.type === 'admin';
        console.log(`üë§ Tipo de usu√°rio: ${payload.type}`);
        console.log(`üîë √â admin: ${isAdmin}`);
        
        return isAdmin;
    } catch (error) {
        console.error('‚ùå Erro ao decodificar token:', error);
        return false;
    }
}

// Fun√ß√£o para mostrar/ocultar elementos de admin
function controlarVisibilidadeAdmin() {
    const isAdmin = verificarSeAdmin();
    const isLoggedIn = !!localStorage.getItem('jwt_token') || !!localStorage.getItem('token');
    
    // Elementos que devem ser vis√≠veis apenas para admin
    const elementosAdmin = document.querySelectorAll('.admin-only');
    
    elementosAdmin.forEach(elemento => {
        if (isAdmin) {
            elemento.style.display = 'block';
            elemento.classList.add('admin-visible');
        } else {
            elemento.style.display = 'none';
            elemento.classList.remove('admin-visible');
        }
    });
    
    // Bot√£o de logout
    const logoutBtn = document.getElementById('logoutBtn');
    
    if (logoutBtn) {
        if (isLoggedIn) {
            logoutBtn.style.display = 'block';
        } else {
            logoutBtn.style.display = 'none';
        }
    }
    
    // Link de login - ocultar quando logado, mostrar quando n√£o logado
    const loginLink = document.querySelector('a[href="/login_cadastro"]');
    if (loginLink) {
        const loginLi = loginLink.parentElement; // Pegar o <li> pai
        if (loginLi) {
            if (isLoggedIn) {
                loginLi.style.display = 'none';
            } else {
                loginLi.style.display = 'block';
            }
        }
    }
    
    console.log(`üîß Visibilidade admin: ${isAdmin ? 'VIS√çVEL' : 'OCULTO'}`);
    console.log(`üîß Usu√°rio logado: ${isLoggedIn ? 'SIM' : 'N√ÉO'}`);
}

// Fun√ß√£o para adicionar classe admin-only a elementos espec√≠ficos
function marcarElementosAdmin() {
    // Marcar link de administra√ß√£o
    const adminLink = document.querySelector('a[href="/admin_dashboard"]');
    if (adminLink) {
        const adminLi = adminLink.parentElement; // Pegar o <li> pai
        if (adminLi) {
            adminLi.classList.add('admin-only');
            adminLi.style.display = 'none'; // Ocultar por padr√£o
        }
    }
    
    // Marcar bot√£o de logout
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
        logoutBtn.style.display = 'none'; // Ocultar por padr√£o
    }
}

// Fun√ß√£o para verificar e atualizar status do usu√°rio
function atualizarStatusUsuario() {
    const token = localStorage.getItem('jwt_token') || localStorage.getItem('token');
    
    if (token) {
        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            console.log(`üë§ Usu√°rio logado: ${payload.email} (${payload.type})`);
        } catch (error) {
            console.error('‚ùå Erro ao processar token:', error);
        }
    }
}

// Fun√ß√£o para fazer logout
function fazerLogout() {
    // Remover token do localStorage
    localStorage.removeItem('jwt_token');
    localStorage.removeItem('token');
    localStorage.removeItem('user_data');
    localStorage.removeItem('user_type');
    
    console.log('üö™ Logout realizado');
    
    // Recarregar a p√°gina para atualizar a interface
    window.location.reload();
}

// Tornar fun√ß√µes dispon√≠veis globalmente
window.verificarSeAdmin = verificarSeAdmin;
window.controlarVisibilidadeAdmin = controlarVisibilidadeAdmin;
window.fazerLogout = fazerLogout;

// Executar quando a p√°gina carregar
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîç Verificando status de admin...');
    
    // Carregar CSS de controle de admin
    carregarCSSAdmin();
    
    // Marcar elementos que devem ser controlados
    marcarElementosAdmin();
    
    // Controlar visibilidade
    controlarVisibilidadeAdmin();
    
    // Atualizar status do usu√°rio
    atualizarStatusUsuario();
    
    // Adicionar evento ao bot√£o de logout
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', function(e) {
            e.preventDefault();
            fazerLogout();
        });
    }
});

// Fun√ß√£o para carregar CSS de controle de admin
function carregarCSSAdmin() {
    // Verificar se o CSS j√° foi carregado
    if (document.getElementById('admin-control-css')) {
        return;
    }
    
    const link = document.createElement('link');
    link.id = 'admin-control-css';
    link.rel = 'stylesheet';
    link.href = '/styles/admin-control.css';
    document.head.appendChild(link);
}

console.log('üîß Comandos dispon√≠veis:');
console.log('- verificarSeAdmin() - Verifica se usu√°rio √© admin');
console.log('- controlarVisibilidadeAdmin() - Controla visibilidade dos elementos');
console.log('- fazerLogout() - Faz logout do usu√°rio');

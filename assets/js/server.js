const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const routes = require('./routes');  // Importa as rotas definidas acima
const pool = require('./database');    // ConexÃ£o com o MySQL

const app = express();
const PORT = 3000;

// Middleware para interpretar JSON nas requisiÃ§Ãµes
app.use(express.json());

// ConfiguraÃ§Ã£o de CORS para permitir acesso de origens especÃ­ficas
app.use(cors({ origin: 'http://seu-front-end.com' })); 

// Middleware de seguranÃ§a com Helmet (ajuda a proteger contra ataques comuns)
app.use(helmet());

// Rate Limiting para limitar o nÃºmero de requisiÃ§Ãµes por IP (protege contra ataques de forÃ§a bruta)
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutos
    max: 100,                // Limite de 100 requisiÃ§Ãµes por IP
    message: 'Muitas requisiÃ§Ãµes, tente novamente mais tarde.'
});
app.use(limiter);

// Usa as rotas definidas no arquivo routes.js
app.use(routes);

// Middleware global para tratamento de erros
app.use((err, req, res, next) => {
    console.error('Erro interno:', err);
    res.status(500).json({ error: 'Erro interno do servidor' });
});

// Testa a conexÃ£o com o banco de dados
pool.query('SELECT 1 + 1 AS result')
    .then(() => {
        console.log('ConexÃ£o com o banco de dados estabelecida');
    })
    .catch((err) => {
        console.error('Erro ao conectar ao banco de dados:', err);
    });

// Inicia o servidor
app.listen(PORT, () => {
    console.log(`Servidor rodando na porta ${PORT} ðŸš€`);
});
